# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MyGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QProgressBar
from PyQt5.Qt import QImage

from threading import Thread
from model import UNET
from torchvision import transforms
from PIL import Image
import numpy as np
import torch
import cv2
import time



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(804, 627)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.img_orig = QtWidgets.QLabel(self.centralwidget)
        self.img_orig.setGeometry(QtCore.QRect(10, 10, 261, 271))
        self.img_orig.setObjectName("img_orig")
        self.img = QtWidgets.QLabel(self.centralwidget)
        self.img.setGeometry(QtCore.QRect(10, 300, 261, 271))
        self.img.setObjectName("img")
        self.mask = QtWidgets.QLabel(self.centralwidget)
        self.mask.setGeometry(QtCore.QRect(300, 10, 261, 271))
        self.mask.setObjectName("mask")
        self.pred = QtWidgets.QLabel(self.centralwidget)
        self.pred.setGeometry(QtCore.QRect(300, 300, 261, 271))
        self.pred.setObjectName("pred")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(590, 50, 151, 51))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(590, 120, 151, 51))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(590, 190, 151, 51))
        self.pushButton_3.setObjectName("pushButton_3")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(590, 250, 151, 170))
        self.groupBox.setObjectName("groupBox")
        self.result = QtWidgets.QLabel(self.groupBox)
        self.result.setGeometry(QtCore.QRect(20, 25, 101, 155))
        self.result.setObjectName("result")
        self.progressBar = QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(583, 450, 200, 20))
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setMinimum(0)
        self.progressBar.setMaximum(500)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 804, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton.clicked.connect(self.loadImage)
        self.pushButton_2.clicked.connect(self.load_model)
        self.pushButton_3.clicked.connect(self.predict)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

############################################################################################################
    ### This is my code
        self.error_dialog = QMessageBox()
        self.filename = None
        self.filemask = None
        self.image = None
        self.img_cvt = None
        self.mask_compare = None
        self.DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
        self.model = UNET(3, 1, bilinear=True)
        self.transform = transforms.Compose([
                                                transforms.Resize(240),
                                                transforms.CenterCrop(240),
                                                transforms.ToTensor(),
                                                transforms.Normalize((0.0, 0.0, 0.0), (1.0, 1.0, 1.0))
                                            ])

    def loadImage(self):
        self.progressBar.setDisabled(True)
        try:
            self.filename = QFileDialog.getOpenFileName(filter="Images (*.png *.xpm *.jpg)")[0]
            self.filemask = self.filename.replace("MRI", "Mask")
            self.filemask = self.filemask.replace("flair", "seg")
            self.image = Image.open(self.filename).convert('RGB')
            self.mask_compare = np.array(Image.open(self.filemask).convert("L"), dtype=np.float32)
            self.mask_compare[np.where(self.mask_compare>0.0)]=1.0
            self.mask_compare = np.expand_dims(self.mask_compare, axis=2)
            self.mask_img = Image.open(self.filemask).convert('RGB')
            self.setPhoto(self.image, self.img_orig, np.uint8)
            self.setPhoto(self.mask_img, self.mask, np.uint8)
        except:
            self.error_dialog.setIcon(QMessageBox.Critical)
            self.error_dialog.setText("Error")
            self.error_dialog.setInformativeText("Cannot Load Image. Please check your MRI image and mask directory.")
            self.error_dialog.setWindowTitle("Error")
            self.error_dialog.exec_()

    def setPhoto(self, image, label, type):
        self.tmp = image
        self.tmp = self.tmp.resize((261, 271), Image.BILINEAR)
        other_img = np.array(self.tmp, dtype= type)
        other_img = QImage(other_img, other_img.shape[1], other_img.shape[0], other_img.strides[0], QImage.Format_RGB888)
        label.setPixmap(QtGui.QPixmap.fromImage(other_img))

    def load_model(self):
        self.progressBar.setDisabled(True)
        try:
            self.modelpath = QFileDialog.getOpenFileName(filter="*.tar")[0]
            self.model.load_state_dict(torch.load(self.modelpath)["state_dict"])
            self.model.eval()
            self.model.to(self.DEVICE)
        except:
            self.error_dialog.setIcon(QMessageBox.Critical)
            self.error_dialog.setText("Error")
            self.error_dialog.setInformativeText("Cannot load your model. Please check your model directory.")
            self.error_dialog.setWindowTitle("Error")
            self.error_dialog.exec_()            

    def predict(self):
        try:
            self.threading(self.progressBar, 0)
            epsilon = 1e-8
            self.img_cvt = np.array(self.image, dtype=np.uint8)
            img_tensor = self.transform(self.image)
            img_tensor = img_tensor.unsqueeze_(0).cpu()
            img_tensor = img_tensor.to(self.DEVICE)
            preds = torch.sigmoid(self.model(img_tensor))
            preds = (preds>0.5).float()
            preds = preds.cpu()
            preds = preds.detach().numpy().transpose(2, 3, 1, 0).squeeze(3)
            self.threading(self.progressBar, 100)

            tp = float((preds*self.mask_compare).sum())
            tp_fp = float(preds.sum())
            tp_fn = float(self.mask_compare.sum())
            den = float((preds+self.mask_compare-(preds*self.mask_compare)).sum())

            precision = (tp+epsilon)/(tp_fp+epsilon)
            recall = (tp+epsilon)/(tp_fn+epsilon)

            f1 = 2*(precision*recall)/(precision+recall) 

            iou = (tp+epsilon)/(den+epsilon)

            dice_score = (2.*tp + epsilon)/(preds.sum() + self.mask_compare.sum() + epsilon)

            self.result.setText(f"Precision: {precision:.2f}\n\nRecall: {recall:.2f}\n\nF1 Score: {f1:.2f}\n\nDice Score: {dice_score:.2f}\n\nIOU Score: {iou:.2f}\n\n")
            self.threading(self.progressBar, 200)

            preds = preds.astype(np.uint8).squeeze(axis=2)
            x, y = np.where(preds==1)
            self.img_cvt[x, y, 1:3] = 0
            self.img_cvt = cv2.resize(self.img_cvt, (261, 271))
            self.threading(self.progressBar, 300)
            self.img_cvt = QImage(self.img_cvt, self.img_cvt.shape[1], self.img_cvt.shape[0], self.img_cvt.strides[0], QImage.Format_RGB888)
            self.img.setPixmap(QtGui.QPixmap.fromImage(self.img_cvt))            

            preds = preds*255
            preds = cv2.cvtColor(preds, cv2.COLOR_GRAY2RGB)
            preds = cv2.resize(preds,(261, 271))
            self.threading(self.progressBar, 400)
            preds = QImage(preds, preds.shape[1], preds.shape[0], preds.strides[0], QImage.Format_RGB888)
            self.pred.setPixmap(QtGui.QPixmap.fromImage(preds))
            self.threading(self.progressBar, 500)
        except:
            self.error_dialog.setIcon(QMessageBox.Critical)
            self.error_dialog.setText("Error")
            self.error_dialog.setInformativeText("Cannot predict. Please check your model or your image.")
            self.error_dialog.setWindowTitle("Error")
            self.error_dialog.exec_()     

    def update_progressBar(self, progressBar, start, n = 100):
        for i in range(n):
            time.sleep(0.001)
            progressBar.setValue(start+i+1)

    def threading(self, progressBar, start, n = 10):
        progressBar.setEnabled(True)
        if start <500:
            t = Thread(target=self.update_progressBar, args=(progressBar, start, n))
            t.daemon = True
            t.start()
            t.join()
        else:
            progressBar.setValue(start)

    


############################################################################################################
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "My APP"))
        MainWindow.setWindowIcon(QtGui.QIcon("doctor.ico"))
        self.img_orig.setText(_translate("MainWindow", "ORIGINAL IMAGE"))
        self.img.setText(_translate("MainWindow", "CONVERT IMAGE"))
        self.mask.setText(_translate("MainWindow", "MASK"))
        self.pred.setText(_translate("MainWindow", "PREDICT"))
        self.pushButton.setText(_translate("MainWindow", "Open Image"))
        self.pushButton_2.setText(_translate("MainWindow", "Load Model"))
        self.pushButton_3.setText(_translate("MainWindow", "Show Result"))
        self.groupBox.setTitle(_translate("MainWindow", "Result"))
        self.result.setText(_translate("MainWindow", "..."))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
